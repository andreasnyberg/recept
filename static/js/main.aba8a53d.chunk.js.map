{"version":3,"sources":["constants.js","components/Header.js","components/AddNew.js","components/ErrorPage.js","components/LoadingSpinner.js","components/Recipe.js","components/Home.js","components/hoc/withDialog.js","components/App.js","index.js"],"names":["AUTH_TOKEN","LOGIN_MUTATION","gql","Header","useState","loginWindowOpen","handleLoginWindowOpen","emailValue","setEmailValue","passwordValue","setPasswordValue","authToken","localStorage","getItem","useMutation","variables","email","password","onCompleted","login","setItem","token","window","location","reload","className","to","onClick","removeItem","onSubmit","e","preventDefault","type","value","onChange","target","placeholder","CREATE_RECIPE_MUTATION","AddNew","newPath","setNewPath","isCreated","setIsCreated","val","stepsValues","setStepsValues","selectedCategoryIds","title","source","noOfPortions","ingredients","formState","setFormState","input","categories","split","filter","item","steps","onError","err","console","log","createRecipe","pathTitle","map","i","autoFocus","vals","handleStepsValueChange","ErrorPage","props","children","LoadingSpinner","RECIPE_QUERY","Recipe","bigFontMode","setBigFontMode","useParams","useQuery","loading","error","data","message","recipe","href","name","id","htmlFor","RECIPES_FEED_QUERY","Home","GRID","searchFilter","setSearchFilter","isOrderAsc","setIsOrderAsc","listStyle","setListStyle","useLazyQuery","fetchPolicy","executeQuery","useEffect","orderBy","handleSearchChange","debouncedSearchChangeHandler","useMemo","_","debounce","recipeFeed","recipes","withDialog","Component","history","useHistory","closeDialogOnEsc","useCallback","keyCode","push","document","addEventListener","removeEventListener","App","RecipeWithDialog","AddNewWithDialog","basename","exact","path","httpLink","createHttpLink","uri","authLink","setContext","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","getElementById"],"mappings":"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","file":"static/js/main.aba8a53d.chunk.js","sourcesContent":["export const AUTH_TOKEN = 'auth-token';","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation, gql } from '@apollo/client';\nimport { AUTH_TOKEN } from '../constants';\n\nconst LOGIN_MUTATION = gql`\n  mutation LoginMutation(\n    $email: String!\n    $password: String!\n  ) {\n    login(email: $email, password: $password) {\n      token\n    }\n  }\n`;\n\nconst Header = () => {\n  const [loginWindowOpen, handleLoginWindowOpen] = useState(false);\n  const [emailValue, setEmailValue] = useState('');\n  const [passwordValue, setPasswordValue] = useState('');\n  const authToken = localStorage.getItem(AUTH_TOKEN);\n\n  const [login] = useMutation(LOGIN_MUTATION, {\n    variables: {\n      email: emailValue,\n      password: passwordValue\n    },\n    onCompleted: ({ login }) => {\n      localStorage.setItem(AUTH_TOKEN, login.token);\n      window.location.reload();\n    }\n  })\n\n  const handleUsernameChange = (e) => {\n    setEmailValue(e.target.value);\n  }\n\n  const handlePasswordChange = (e) => {\n    setPasswordValue(e.target.value);\n  }\n\n  const handleLogin = (e) => {\n    e.preventDefault();\n    login();\n  }\n\n  const handleLogout = () => {\n    localStorage.removeItem(AUTH_TOKEN);\n    window.location.reload();\n  }\n\n  return (\n    <header className=\"header\">\n      {authToken && (\n        <Link to=\"/add-new\" className=\"button border-button\">\n            Nytt recept\n            <span>\n              ➕\n            </span>\n        </Link>\n      )}\n\n      {authToken ? (\n        <button onClick={handleLogout} className=\"button border-button\">Logga ut</button>\n      ) : (\n        <button onClick={() => handleLoginWindowOpen(true)} className=\"button border-button\">Logga in</button>\n      )}\n\n      {loginWindowOpen && (\n        <div className=\"login-window\">\n          <form onSubmit={handleLogin}>\n            <input type=\"text\" value={emailValue} onChange={handleUsernameChange} placeholder=\"E-post\" className=\"recipe-input\" />\n            <input type=\"password\" value={passwordValue} onChange={handlePasswordChange} placeholder=\"Lösenord\" className=\"recipe-input\" />\n            <input type=\"submit\" value=\"Logga in\" className=\"button border-button\" />\n          </form>\n        </div>\n      )}\n    </header>\n  );\n};\n\nexport default Header;","import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useMutation, gql } from '@apollo/client';\nimport { AUTH_TOKEN } from '../constants';\n// import Categories from './Categories';\n\n\nconst CREATE_RECIPE_MUTATION = gql`\n  mutation CreateRecipeMutation($input: RecipeInput) {\n    createRecipe(input: $input) {\n      pathTitle\n    }\n  }\n`;\n\nconst AddNew = () => {\n  const [newPath, setNewPath] = useState('');\n  const [isCreated, setIsCreated] = useState(false);\n  const [stepsValues, setStepsValues] = useState({ val: ['', ''] });\n  const [selectedCategoryIds, setSelectedCategoryIds] = useState([]);\n  const [formState, setFormState] = useState({\n    title: '',\n    source: '',\n    noOfPortions: '',\n    ingredients: '',\n  });\n\n  const authToken = localStorage.getItem(AUTH_TOKEN);\n  const [createRecipe] = useMutation(CREATE_RECIPE_MUTATION, {\n    variables: {\n      input: {\n        title: formState.title,\n        source: formState.source,\n        noOfPortions: formState.noOfPortions,\n        categories: selectedCategoryIds,\n        ingredients: formState.ingredients\n          .split(\"\\n\")\n          .filter(item => item),\n        steps: stepsValues.val,\n      }\n    },\n    onError(err) {\n      console.log(err);\n    },\n    onCompleted: ({ createRecipe }) => {\n      setNewPath(createRecipe.pathTitle);\n      setIsCreated(true);\n    }\n  })\n\n  const handleAddStep = () => {\n    setStepsValues({ val: [ ...stepsValues.val, '' ]})\n  }\n\n  const handleRecipePost = () => {\n    createRecipe();\n  }\n\n  const handleStepsValueChange = (e, i) => {\n    let vals = [ ...stepsValues.val ];\n    vals[i] = e.target.value;\n    setStepsValues({ val: vals });\n  }\n\n  // Categories coming soon... ✨\n  // eslint-disable-next-line no-unused-vars\n  const handleCategoryChange = (e) => {\n    const id = e.target.name;\n\n    setSelectedCategoryIds(prevSelectedCategoryIds => selectedCategoryIds.includes(id)\n      ? prevSelectedCategoryIds.filter(prevId => prevId !== id)\n      : [ ...prevSelectedCategoryIds, id ]);\n  }\n\n  const renderStepsInputs = () => {\n    return stepsValues.val.map((item, i) =>\n      <textarea\n        key={i}\n        autoFocus={i > 1} // Only focus newly added.\n        className=\"recipe-input\"\n        value={item || ''}\n        onChange={(e) => handleStepsValueChange(e, i)}\n        placeholder={`Steg ${i + 1}`}\n      />\n    );\n  }\n\n  if (!authToken) {\n    return <Redirect to=\"/\" />\n  }\n\n  if (isCreated) {\n    return <Redirect to={`/recept/${newPath}`} />\n  }\n\n  return (\n    <div className=\"add-new-container\">\n      <h2>Lägg till nytt recept</h2>\n      {/* <Categories onCategoryCheck={handleCategoryChange} /> */}\n\n      <input\n        className=\"recipe-input recipe-input--big\"\n        value={formState.title}\n        onChange={(e) =>\n          setFormState({\n            ...formState,\n            title: e.target.value\n          })\n        }\n        type=\"text\"\n        placeholder=\"Titel\"\n      />\n\n      <div className=\"source-and-portions-container\">\n        <input\n          className=\"recipe-input recipe-input--small\"\n          value={formState.source}\n          onChange={(e) =>\n            setFormState({\n              ...formState,\n              source: e.target.value\n            })\n          }\n          type=\"text\"\n          placeholder=\"Länk till original\"\n        />\n\n        <input\n          className=\"recipe-input recipe-input--small\"\n          value={formState.noOfPortions}\n          onChange={(e) =>\n            setFormState({\n              ...formState,\n              noOfPortions: e.target.value\n            })\n          }\n          type=\"number\"\n          placeholder=\"Antal portioner\"\n        />\n      </div>\n\n      <div className=\"textarea-container\">\n        <div className=\"ingredients-container\">\n          <textarea\n            className=\"recipe-input\"\n            value={formState.ingredients}\n            onChange={(e) =>\n              setFormState({\n                ...formState,\n                ingredients: e.target.value\n              })\n            }\n            placeholder=\"Ingredienser\"\n          />\n        </div>\n\n        <div className=\"steps-container\">\n          { renderStepsInputs() }\n\n          <button\n            className=\"button border-button border-button--medium add-step-button\"\n            type=\"button\"\n            onClick={handleAddStep}\n          >\n            Lägg till steg <span>➕</span>\n          </button>\n        </div>\n      </div>\n\n      <button\n        className=\"button border-button border-button--big post-button\"\n        type=\"button\"\n        onClick={handleRecipePost}\n      >\n        Klar! <span>✔️</span>\n      </button>\n    </div>\n  );\n};\n\nexport default AddNew;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst ErrorPage = (props) => {\n  return (\n    <div className=\"error-page\">\n      {props.children}\n      <Link to=\"/\" className=\"button floating-button floating-button--link\">Ta mig till startsidan 🚀</Link>\n    </div>\n  );\n};\n\nexport default ErrorPage;","const LoadingSpinner = () => (\n  <div className=\"loading-spinner\">\n      <div className=\"bounce bounce--1\"></div>\n      <div className=\"bounce bounce--2\"></div>\n      <div className=\"bounce bounce--3\"></div>\n  </div>\n);\n\nexport default LoadingSpinner;","import React, { useState } from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { useParams } from 'react-router-dom';\nimport ErrorPage from './ErrorPage';\nimport LoadingSpinner from './LoadingSpinner';\n\nconst RECIPE_QUERY = gql`\n  query recipeQuery($pathTitle: String!)\n  {\n    recipe(pathTitle: $pathTitle) {\n      id\n      title\n      source\n      noOfPortions\n      pathTitle\n      ingredients {\n        id\n        name\n      }\n      steps {\n        id\n        name\n      }\n    }\n  }\n`;\n\nconst Recipe = () => {\n  const [bigFontMode, setBigFontMode] = useState(false);\n  let { pathTitle } = useParams();\n  const { loading, error, data } = useQuery(RECIPE_QUERY, {\n    variables: { pathTitle: pathTitle },\n  });\n\n  if (loading) return <LoadingSpinner />;\n  if (error) return (\n    <ErrorPage>\n      <h1>Ajdå! 😕</h1>\n      <h3>Error:</h3>\n      <p>{error.message}</p>\n    </ErrorPage>\n  );\n\n  const { recipe } = data;\n\n  const handleBigFontMode = () => {\n    setBigFontMode(!bigFontMode);\n  }\n\n  return (\n    <div className={`recipe ${bigFontMode ? 'bigfont-mode' : ''}`}>\n      <h1>{recipe.title}</h1>\n\n      {\n        (recipe.noOfPortions || recipe.source) && (\n          <div className=\"recipe-meta\">\n            {recipe.noOfPortions && (\n              <p>{recipe.noOfPortions} portioner</p>\n            )}\n\n            {(recipe.noOfPortions && recipe.source) && (\n              <span className=\"recipe-meta-separator\">|</span>\n            )}\n\n            {recipe.source && (\n              <a href={recipe.source}>Länk till original</a>\n            )}\n          </div>\n        )\n      }\n\n\n      <div className=\"recipe-sections\">\n        <div className=\"recipe-ingredients\">\n          <h2>Ingredienser</h2>\n          <ul>\n            {recipe.ingredients.map(item => (\n              <li key={item.id}>{item.name}</li>\n            ))}\n          </ul>\n        </div>\n\n        <div className=\"recipe-steps\">\n          <h2>Tillagning</h2>\n          <ul>\n            {recipe.steps.map(item => (\n              <li key={item.id} className=\"step-row\">\n                <input className=\"checkbox\" id={`recipe-step-checkbox-${item.id}`} type=\"checkbox\" value=\"value1\" />\n                <label htmlFor={`recipe-step-checkbox-${item.id}`}>{item.name}</label>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n\n      <button\n        onClick={handleBigFontMode}\n        className=\"button toggle-bigfont-mode floating-button floating-button--round\"\n      />\n    </div>\n  );\n}\n\nexport default Recipe;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useLazyQuery, gql } from '@apollo/client';\nimport _ from 'lodash';\n\nconst RECIPES_FEED_QUERY = gql`\n  query RecipeFeedQuery(\n    $filter: String!\n    $orderBy: RecipeOrderByInput\n  ) {\n    recipeFeed(filter: $filter, orderBy: $orderBy) {\n      id\n      recipes {\n        id\n        createdAt\n        title\n        pathTitle\n      }\n    }\n  }\n`;\n\nconst Home = () => {\n  const [ GRID, LIST ] = ['grid', 'list'];\n  const [searchFilter, setSearchFilter] = useState('');\n  const [isOrderAsc, setIsOrderAsc] = useState(true);\n  const [listStyle, setListStyle] = useState(GRID);\n  const [executeQuery, { data }] = useLazyQuery(\n    RECIPES_FEED_QUERY,\n    { fetchPolicy: 'no-cache' }\n  );\n\n  useEffect(() => {\n    const orderByValue = isOrderAsc ? 'asc' : 'desc';\n\n    executeQuery({\n      variables: {\n        filter: searchFilter,\n        orderBy: { title: orderByValue },\n      }\n    })\n  }, [executeQuery, searchFilter, isOrderAsc]);\n\n  const handleSearchChange = (e) => {\n    console.log('handleSearchChange');\n    setSearchFilter(e.target.value)\n  }\n\n  const debouncedSearchChangeHandler = useMemo(\n    () => _.debounce(handleSearchChange, 300),\n  []);\n\n  const toggleOrderBy = () => {\n    setIsOrderAsc(!isOrderAsc)\n  }\n\n  const toggleListStyle = () => {\n    const newListStyle = listStyle === GRID ? LIST : GRID;\n    setListStyle(newListStyle);\n  }\n\n  return (\n    <div className=\"home\">\n      <div className=\"list-tools\">\n        <div className=\"list-tools-col--wide\">\n          <span className=\"search-icon\">\n            <input\n              type=\"text\"\n              className=\"recipe-input search-input\"\n              onChange={debouncedSearchChangeHandler}\n            />\n          </span>\n        </div>\n\n        <div className=\"list-tools-col\">\n          <button\n            className=\"button floating-button list-tool-button list-tool-button--order\"\n            onClick={toggleOrderBy}\n          >\n            <span className={`icon ${isOrderAsc ? 'isAsc' : ''}`} />\n          </button>\n        </div>\n\n        <div className=\"list-tools-col\">\n          <button\n            className=\"button floating-button list-tool-button list-tool-button--list-style\"\n            onClick={toggleListStyle}\n          >\n            <span className={`icon ${listStyle === GRID ? 'isGrid' : ''}`} />\n          </button>\n        </div>\n      </div>\n\n      <ul className={`recipe-list ${listStyle}`}>\n        {data && (\n          <>\n            {data.recipeFeed.recipes.map((recipe) => (\n              <li className=\"recipe-list-item\" key={recipe.id}>\n                <Link to={`/recept/${recipe.pathTitle}`} className=\"button recipe-link floating-button\">\n                  <h2>{recipe.title}</h2>\n                </Link>\n              </li>\n            ))}\n          </>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default Home;","import { useCallback, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\n\nconst withDialog = Component => props => {\n  let history = useHistory();\n  const closeDialogOnEsc = useCallback((e) => {\n    if(e.keyCode === 27) {\n      history.push('/');\n    }\n  }, [history]);\n\n  useEffect(() => {\n    document.addEventListener('keydown', closeDialogOnEsc);\n\n    return () => {\n      document.removeEventListener('keydown', closeDialogOnEsc);\n    };\n  });\n\n  return (\n    <div className=\"dialog-outer\">\n      <div className=\"dialog\">\n        <div className=\"dialog-inner\">\n          <Link to=\"/\" className=\"button dialog-close-button floating-button floating-button--round\" />\n          <Component {...props} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default withDialog;","import {\n  BrowserRouter as Router,\n  HashRouter,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport '../styles/App.scss';\nimport Header from './Header';\nimport AddNew from './AddNew';\nimport Recipe from './Recipe'; \nimport Home from './Home';\nimport ErrorPage from './ErrorPage';\nimport withDialog from './hoc/withDialog';\n\nfunction App(props) {\n  const RecipeWithDialog = withDialog(Recipe)\n  const AddNewWithDialog = withDialog(AddNew);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <HashRouter basename=\"/\">\n          <Switch>\n            <Route exact path=\"/\">\n              <Header />\n              <Home />\n            </Route>\n\n            <Route path=\"/recept/:pathTitle\">\n              <RecipeWithDialog />\n            </Route>\n\n            <Route path=\"/add-new\">\n              <AddNewWithDialog />\n            </Route>\n\n            <Route path=\"*\">\n              <ErrorPage>\n                <h1>Ooops..</h1>\n                <h3>Denna sida verkar inte existera 😕</h3>\n              </ErrorPage>\n            </Route>\n          </Switch>\n        </HashRouter>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { AUTH_TOKEN } from './constants';\n\n// This will connect our client instance with the gql api, uri is where server runs.\nconst httpLink = createHttpLink({\n  uri: process.env.NODE_ENV === 'development' ? 'http://localhost:4000/graphql' : '/graphql'\n});\n\n// Make sure all requests that gets sent to\n// the server is aware of the token.\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(AUTH_TOKEN);\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}